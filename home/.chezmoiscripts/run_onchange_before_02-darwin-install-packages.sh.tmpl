{{- if and (eq .chezmoi.os "darwin") (hasKey .packages "darwin") -}}
#!{{ lookPath "sh" }}

{{ if hasKey .packages.darwin "universal" }}
{{ if .brewcasks -}}
# First check missing and outdated casks
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.universal.casks -}}
cask {{ . | quote }}
{{ end -}}
EOF
)
{{ end -}}

# Capture the output of `brew bundle check`
bundle_check_output=$(echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin)

# Parse missing casks (those that are not installed)
missing_casks=$(echo "$bundle_check_output" | grep "not installed" | grep -i "cask" | sed 's/.*not installed: //')

# Parse outdated casks
outdated_casks=$(echo "$bundle_check_output" | grep "outdated" | grep -i "cask" | sed 's/.*outdated: //')

# Combine missing and outdated casks into one list
all_casks_to_install_or_update="$missing_casks"$'\n'"$outdated_casks"

# Generate the tap & formulas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.universal.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.universal.brews -}}
brew {{ . | quote }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ if .brewcasks -}}
# If there are missing or outdated casks, generate a Brewfile for only those casks
if [[ -n "$all_casks_to_install_or_update" ]]; then
    echo "The following casks are missing or outdated:"
    echo "$all_casks_to_install_or_update"

    # Start the Brewfile content
    brewfile_content="# Brewfile generated for missing and outdated casks\n\n"

    # Add missing or outdated casks dynamically
    while IFS= read -r cask; do
        brewfile_content+=$(echo "cask \"${cask}\"")
    done <<< "$all_casks_to_install_or_update"

    # Check if the Brewfile content is correct
    echo -e "$brewfile_content"

    # Step 1: Check if the casks are already installed using `brew bundle check`
    echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

    # Step 2: If some casks are missing or outdated, install them
    if [[ $? -ne 0 ]]; then
        echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
    fi
else
    echo "No missing or outdated casks to install."
fi
{{ end -}}

# Generate the mas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.universal.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ if and (.environment.work) (hasKey .packages.darwin "work") }}
HOMEBREW_GITHUB_API_TOKEN='{{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/6gs2v2ehe4k74q6u3yez4b65ii/password" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}'

{{ if .brewcasks -}}
# First check missing and outdated casks
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.work.casks -}}
cask {{ . | quote }}
{{ end -}}
EOF
)
{{ end -}}

# Capture the output of `brew bundle check`
bundle_check_output=$(echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin)

# Parse missing casks (those that are not installed)
missing_casks=$(echo "$bundle_check_output" | grep "not installed" | grep -i "cask" | sed 's/.*not installed: //')

# Parse outdated casks
outdated_casks=$(echo "$bundle_check_output" | grep "outdated" | grep -i "cask" | sed 's/.*outdated: //')

# Combine missing and outdated casks into one list
all_casks_to_install_or_update="$missing_casks"$'\n'"$outdated_casks"

# Generate the tap & formulas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.work.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.work.brews -}}
brew {{ . | quote }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ if .brewcasks -}}
# If there are missing or outdated casks, generate a Brewfile for only those casks
if [[ -n "$all_casks_to_install_or_update" ]]; then
    echo "The following casks are missing or outdated:"
    echo "$all_casks_to_install_or_update"

    # Start the Brewfile content
    brewfile_content="# Brewfile generated for missing and outdated casks\n\n"

    # Add missing or outdated casks dynamically
    while IFS= read -r cask; do
        brewfile_content+=$(echo "cask \"${cask}\"")
    done <<< "$all_casks_to_install_or_update"

    # Check if the Brewfile content is correct
    echo -e "$brewfile_content"

    # Step 1: Check if the casks are already installed using `brew bundle check`
    echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

    # Step 2: If some casks are missing or outdated, install them
    if [[ $? -ne 0 ]]; then
        echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
    fi
else
    echo "No missing or outdated casks to install."
fi
{{ end -}}

# Generate the mas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.work.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ if and (.environment.personal) (hasKey .packages.darwin "personal") }}
HOMEBREW_GITHUB_API_TOKEN='{{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/6gs2v2ehe4k74q6u3yez4b65ii/password" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}'

{{ if .brewcasks -}}
# First check missing and outdated casks
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.personal.casks -}}
cask {{ . | quote }}
{{ end -}}
EOF
)
{{ end -}}

# Capture the output of `brew bundle check`
bundle_check_output=$(echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin)

# Parse missing casks (those that are not installed)
missing_casks=$(echo "$bundle_check_output" | grep "not installed" | grep -i "cask" | sed 's/.*not installed: //')

# Parse outdated casks
outdated_casks=$(echo "$bundle_check_output" | grep "outdated" | grep -i "cask" | sed 's/.*outdated: //')

# Combine missing and outdated casks into one list
all_casks_to_install_or_update="$missing_casks"$'\n'"$outdated_casks"

# Generate the tap & formulas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.personal.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.personal.brews -}}
brew {{ . | quote }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ if .brewcasks -}}
# If there are missing or outdated casks, generate a Brewfile for only those casks
if [[ -n "$all_casks_to_install_or_update" ]]; then
    echo "The following casks are missing or outdated:"
    echo "$all_casks_to_install_or_update"

    # Start the Brewfile content
    brewfile_content="# Brewfile generated for missing and outdated casks\n\n"

    # Add missing or outdated casks dynamically
    while IFS= read -r cask; do
        brewfile_content+=$(echo "cask \"${cask}\"")
    done <<< "$all_casks_to_install_or_update"

    # Check if the Brewfile content is correct
    echo -e "$brewfile_content"

    # Step 1: Check if the casks are already installed using `brew bundle check`
    echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

    # Step 2: If some casks are missing or outdated, install them
    if [[ $? -ne 0 ]]; then
        echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
    fi
else
    echo "No missing or outdated casks to install."
fi
{{ end -}}

# Generate the mas Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.personal.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ end }}
