{{- if and (eq .chezmoi.os "darwin") (hasKey .packages "darwin") -}}
#!{{ lookPath "sh" }}

{{ if hasKey .packages.darwin "universal" }}

# Initialize an array to store casks that are not yet installed
non_installed_casks=()

{{ if .brewcasks -}}
# Check each cask if it is installed, if not, add it to the list of non_installed_casks
{{ range .packages.darwin.universal.casks -}}
  cask="{{ . | quote }}"
  if ! brew list --cask "$cask" > /dev/null 2>&1; then
    non_installed_casks+=("$cask")
  fi
{{ end }}
{{ end }}

# Generate the Brewfile content dynamically and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.universal.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.universal.brews -}}
brew {{ . | quote }}
{{ end -}}

{{ if .brewcasks -}}
{{ if .non_installed_casks -}}
{{ range .non_installed_casks -}}
cask {{ . }}
{{ end -}}
{{ end -}}
{{ end -}}

{{ range .packages.darwin.universal.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
{{ end }}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ if and (.environment.work) (hasKey .packages.darwin "work") }}
HOMEBREW_GITHUB_API_TOKEN='{{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/6gs2v2ehe4k74q6u3yez4b65ii/password" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}'

# Initialize an array to store casks that are not yet installed
non_installed_casks=()

{{ if .brewcasks -}}
# Check each cask if it is installed, if not, add it to the list of non_installed_casks
{{ range .packages.darwin.work.casks -}}
  cask="{{ . | quote }}"
  if ! brew list --cask "$cask" > /dev/null 2>&1; then
    non_installed_casks+=("$cask")
  fi
{{ end }}
{{ end }}

# Generate the Brewfile content dynamically for work and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.work.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.work.brews -}}
brew {{ . | quote }}
{{ end -}}

{{ if .brewcasks -}}
{{ if .non_installed_casks -}}
{{ range .non_installed_casks -}}
cask {{ . }}
{{ end -}}
{{ end -}}
{{ end -}}

{{ range .packages.darwin.work.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
{{ end }}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ if and (.environment.personal) (hasKey .packages.darwin "personal") }}
HOMEBREW_GITHUB_API_TOKEN='{{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/6gs2v2ehe4k74q6u3yez4b65ii/password" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}'

# Initialize an array to store casks that are not yet installed
non_installed_casks=()

{{ if .brewcasks -}}
# Check each cask if it is installed, if not, add it to the list of non_installed_casks
{{ range .packages.darwin.personal.casks -}}
  cask="{{ . | quote }}"
  if ! brew list --cask "$cask" > /dev/null 2>&1; then
    non_installed_casks+=("$cask")
  fi
{{ end }}
{{ end }}

# Generate the Brewfile content dynamically for personal and store it in a variable
brewfile_content=$(cat <<EOF
{{ range .packages.darwin.personal.taps -}}
tap {{ . | quote }}
{{ end -}}

{{ range .packages.darwin.personal.brews -}}
brew {{ . | quote }}
{{ end -}}

{{ if .brewcasks -}}
{{ if .non_installed_casks -}}
{{ range .non_installed_casks -}}
cask {{ . }}
{{ end -}}
{{ end -}}
{{ end -}}

{{ range .packages.darwin.personal.mas -}}
mas {{ .name | quote }}, id: {{ .id }}
{{ end -}}
{{ end }}
EOF
)

# Step 1: Check if all packages are already installed using `brew bundle check`
echo "$brewfile_content" | brew bundle check --no-lock --file=/dev/stdin

# Step 2: If some packages are missing, install them
if [[ $? -ne 0 ]]; then
    echo "$brewfile_content" | brew bundle --no-lock --file=/dev/stdin
fi

{{ end }}


{{ end }}
