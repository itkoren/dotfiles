{{ if eq .chezmoi.os "darwin" -}}
#!{{ lookPath "sh" }}
{{- $workingTree := .chezmoi.workingTree }}

if [ ! -d "$HOME/Library/Application Support/Sublime Text" ]; then
  echo "****************************************************************************"
  echo "****************************************************************************"
  echo "****************************************************************************"
  echo "**** Sublime Text App will be opened when you press the Enter button    ****"
  echo "**** Please click Tools->Command Palette & type Install Package Control ****"
  echo "**** After installation completes quite the applications                ****"
  echo "****************************************************************************"
  echo "****************************************************************************"
  echo "****************************************************************************"
  open "/Applications/Sublime Text.app"
  read -p "Press any key to continue." -n 1 -r
fi

if [ ! -d "$HOME/Library/Application Support/Sublime Text/Packages/User" ]; then
  if [ -d "$HOME/Library/Application Support/Sublime Text" ]; then
    mkdir -p "$HOME/Library/Application Support/Sublime Text/Packages/User"
  fi
fi
if [ -d "$HOME/Library/Application Support/Sublime Text/Packages/User" ]; then
  if [ -L "$HOME/Library/Application Support/Sublime Text/Packages/User" ]; then
    echo "sublime text settings already linked"
  else
    echo "going to create sublime text settings symbolic link"
    rm -r "$HOME/Library/Application Support/Sublime Text/Packages/User"
    ln -s "{{ $workingTree }}/preferences/sublime/User" "$HOME/Library/Application Support/Sublime Text/Packages/"
    echo "sublime text settings linked"
  fi
fi

if [ ! -d "$HOME/Library/Application Support/Alfred" ]; then
  echo "*******************************************************************************"
  echo "*******************************************************************************"
  echo "*******************************************************************************"
  echo "**** Alfred 5 App will be opened when you press the Enter button           ****"
  echo "**** Please click Configure & paste the opened license contents & continue ****"
  echo "**** Then click Quit                                                       ****"
  echo "*******************************************************************************"
  echo "*******************************************************************************"
  echo "*******************************************************************************"
  open "/Applications/Alfred 5.app"
  # Wait for 2 seconds
  sleep 2
  open "$HOME/content/licenses/alfred.license.txt"
  read -p "Press any key to continue." -n 1 -r
fi
if [ ! -d "$HOME/Library/Application Support/Alfred/Alfred.alfredpreferences" ]; then
  if [ -d "$HOME/Library/Application Support/Alfred" ]; then
    mkdir -p "$HOME/Library/Application Support/Alfred/Alfred.alfredpreferences"
  fi
fi
if [ -d "$HOME/Library/Application Support/Alfred/Alfred.alfredpreferences" ]; then
  if [ -L "$HOME/Library/Application Support/Alfred/Alfred.alfredpreferences" ]; then
    echo "alfred settings already linked"
  else
    echo "going to create alfred settings symbolic link"
    rm -r "$HOME/Library/Application Support/Alfred/Alfred.alfredpreferences"
    ln -s "{{ $workingTree }}/preferences/alfred/Alfred.alfredpreferences" "$HOME/Library/Application Support/Alfred/"
    echo "alfred settings linked"

    echo -n "after you'll hit enter, alfred openes - paste the license and continue"
    open -a "/Applications/Alfred 5.app"
    # Wait for 2 seconds
    sleep 2
    osascript -e 'tell application "System Events" to keystroke "," using {command down}'
    open "$HOME/content/licenses/alfred.license.txt"
    read
  fi
fi

# List of keywords to search for
KEYWORDS="bitdefender netgeararmor netgear"

# Check Applications folder
armor_check_applications() {
  for keyword in $KEYWORDS; do
    if ls /Applications 2>/dev/null | grep -i "$keyword" >/dev/null; then
      return 0
    fi
  done
  return 1
}

# Check running processes
armor_check_processes() {
  for keyword in $KEYWORDS; do
    if ps aux | grep -i "$keyword" | grep -v grep >/dev/null; then
      return 0
    fi
  done
  return 1
}

# Check installed packages
armor_check_packages() {
  for keyword in $KEYWORDS; do
    if pkgutil --pkgs 2>/dev/null | grep -i "$keyword" >/dev/null; then
      return 0
    fi
  done
  return 1
}

# Run all checks
armor_check_applications || armor_check_processes || armor_check_packages
IS_INSTALLED=$?

# Action based on check result
if [ "$IS_INSTALLED" -eq 0 ]; then
  echo "✅ Netgear Armor or Bitdefender appears to be installed."
else
  echo "❌ Netgear Armor is not installed. Opening browser..."
  echo "{{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/2fismakc6pygghrwkf6g5jrvkm/credential" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}" | open "https://armor.netgear.com/download_protection?install_code={{ onepasswordRead "op://jdc3emtdvytbu3zz7q3iebne4q/2fismakc6pygghrwkf6g5jrvkm/credential" "C4SXB3KJ45CXLDMVFFD3WPQC7U" }}&cid=ipl%7Cc%7Ccentral_web%7Cdeploy_flow&lang=en_US&product=protection"
fi
{{ end -}}
